CryptoAI Android Application Documentation
=====================================

Project Overview
---------------
This is an Android application built with Kotlin that combines cryptocurrency functionality with AI features. The app follows modern Android architecture patterns and uses Jetpack Compose for the UI.

Project Structure
----------------
1. Main Components:
   - MainActivity.kt: Entry point of the application
   - SplashScreen.kt: Initial loading screen
   - IntroScreen.kt: Onboarding screen
   - LoginScreen.kt: User authentication
   - HomeScreen.kt: Main application interface
   - ChatScreen.kt: AI-powered chat interface
   - ChatViewModel.kt: Manages chat state and logic
   - UiState.kt: Defines UI states for the application

2. Architecture:
   - Uses MVVM (Model-View-ViewModel) architecture
   - Implements Jetpack Compose for modern UI
   - Follows clean architecture principles
   - Uses ViewModels for state management

Key Features
-----------
1. Authentication System:
   - Login functionality
   - User session management
   - Secure authentication flow

2. AI Chat Interface:
   - Real-time chat with AI
   - Cryptocurrency-related queries
   - Intelligent responses

3. Home Screen:
   - Main dashboard
   - Cryptocurrency information
   - User interface elements

4. Navigation:
   - Bottom navigation
   - Screen transitions
   - Deep linking support

Technical Details
---------------
1. Dependencies (from build.gradle.kts):
   - AndroidX Core
   - Jetpack Compose
   - Material Design
   - Navigation Components
   - ViewModel
   - LiveData

2. UI Components:
   - Material Design components
   - Custom composables
   - Responsive layouts
   - Theme support

3. State Management:
   - UiState for UI state handling
   - ViewModel for business logic
   - State hoisting patterns

4. Navigation:
   - Bottom navigation implementation
   - Screen routing
   - Navigation graph

File Descriptions and Code
-------------------------
1. MainActivity.kt:
   - Application entry point
   - Sets up the main navigation
   - Initializes the app theme

```kotlin
package com.example.cryptoai

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import com.example.cryptoai.navigation.NavigationScreen
import com.example.cryptoai.ui.theme.CryptoAiTheme

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            CryptoAiTheme {
                NavigationScreen()
            }
        }
    }
}
```

2. SplashScreen.kt:
   - Initial loading screen
   - App branding display
   - Loading animation

```kotlin
package com.example.cryptoai

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.cryptoai.ui.theme.PrimaryGreen
import com.example.cryptoai.ui.theme.Urbanist

@Composable
fun SplashScreen() {
    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFF131316)),
        contentAlignment = Alignment.Center
    ) {
        Row(verticalAlignment = Alignment.Bottom) {
            Text(
                text = "CRYPTO",
                color = Color.White,
                fontFamily = Urbanist,
                fontWeight = FontWeight.Bold,
                fontSize = 36.sp,
                letterSpacing = 2.sp
            )
            Spacer(modifier = Modifier.width(4.dp))
            Text(
                text = "Ai",
                color = PrimaryGreen,
                fontFamily = Urbanist,
                fontWeight = FontWeight.Bold,
                fontSize = 44.sp,
                letterSpacing = 1.sp
            )
        }
    }
}
```

3. IntroScreen.kt:
   - Onboarding experience
   - Feature introduction
   - User guidance

```kotlin
package com.example.cryptoai

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.cryptoai.ui.theme.PrimaryGreen
import com.example.cryptoai.ui.theme.Urbanist
import com.example.cryptoai.R

@Composable
fun IntroScreen(currentPage: Int, onContinue: () -> Unit) {
    val titles = listOf(
        "Exchange Your Crypto with Confidence",
        "Explore, Trade & Grow Your Crypto Portfolio"
    )
    val subtitles = listOf(
        "",
        ""
    )

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFF131316))
    ) {
        // Skip button
        Text(
            text = "Skip",
            color = Color.White,
            fontFamily = Urbanist,
            fontWeight = FontWeight.Medium,
            fontSize = 16.sp,
            modifier = Modifier
                .align(Alignment.TopEnd)
                .padding(24.dp)
        )

        // Main content
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(horizontal = 16.dp),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.Center
        ) {
            Spacer(modifier = Modifier.height(32.dp))
            Image(
                painter = painterResource(id = R.drawable.intro),
                contentDescription = "Intro Image",
                modifier = Modifier
                    .fillMaxWidth(0.8f)
                    .aspectRatio(0.5f)
            )
            Spacer(modifier = Modifier.height(32.dp))
            Box(
                modifier = Modifier
                    .background(Color(0xFF18181C), shape = MaterialTheme.shapes.medium)
                    .fillMaxWidth()
                    .padding(24.dp)
            ) {
                Column(
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    Text(
                        text = titles[currentPage],
                        color = Color.White,
                        fontFamily = Urbanist,
                        fontWeight = FontWeight.Bold,
                        fontSize = 20.sp
                    )
                    Spacer(modifier = Modifier.height(8.dp))
                    Text(
                        text = subtitles[currentPage],
                        color = Color(0xFFB0B0B0),
                        fontFamily = Urbanist,
                        fontWeight = FontWeight.Normal,
                        fontSize = 14.sp
                    )
                }
            }
        }

        // Progress indicator and arrow button
        Row(
            modifier = Modifier
                .align(Alignment.BottomStart)
                .padding(start = 32.dp, bottom = 32.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            repeat(2) { i ->
                Box(
                    modifier = Modifier
                        .size(12.dp)
                        .background(
                            if (i == currentPage) PrimaryGreen else Color(0xFFB0B0B0),
                            shape = CircleShape
                        )
                )
                if (i == 0) Spacer(modifier = Modifier.width(8.dp))
            }
        }
        IconButton(
            onClick = onContinue,
            modifier = Modifier
                .align(Alignment.BottomEnd)
                .padding(end = 32.dp, bottom = 24.dp)
                .size(48.dp)
                .background(PrimaryGreen, shape = CircleShape)
        ) {
            Icon(
                painter = painterResource(id = R.drawable.ic_arrow_right),
                contentDescription = "Continue",
                tint = Color.White,
                modifier = Modifier.size(28.dp)
            )
        }
    }
}
```

4. LoginScreen.kt:
   - User authentication
   - Login form
   - Error handling

```kotlin
package com.example.cryptoai

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.PasswordVisualTransformation
import androidx.compose.ui.text.input.VisualTransformation
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.cryptoai.ui.theme.PrimaryGreen
import com.example.cryptoai.ui.theme.Urbanist
import com.example.cryptoai.R

@Composable
fun LoginScreen(onLogin: () -> Unit) {
    var email by remember { mutableStateOf("Suleyman@gmail.com") }
    var password by remember { mutableStateOf("2025") }
    var passwordVisible by remember { mutableStateOf(false) }

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFF131316))
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(horizontal = 24.dp)
                .align(Alignment.Center),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Spacer(modifier = Modifier.height(24.dp))
            Text(
                text = "Hi Welcome\nBack !",
                color = Color.White,
                fontFamily = Urbanist,
                fontWeight = FontWeight.Bold,
                fontSize = 28.sp,
                modifier = Modifier.align(Alignment.Start)
            )
            Spacer(modifier = Modifier.height(24.dp))
            Text(
                text = "Email Address",
                color = Color.White,
                fontFamily = Urbanist,
                fontWeight = FontWeight.SemiBold,
                fontSize = 14.sp,
                modifier = Modifier.align(Alignment.Start)
            )
            Spacer(modifier = Modifier.height(8.dp))
            TextField(
                value = email,
                onValueChange = { email = it },
                singleLine = true,
                modifier = Modifier
                    .fillMaxWidth()
                    .background(Color(0xFF18181C), RoundedCornerShape(12.dp)),
                colors = TextFieldDefaults.colors(
                    unfocusedContainerColor = Color(0xFF18181C),
                    focusedContainerColor = Color(0xFF18181C),
                    unfocusedIndicatorColor = Color.Transparent,
                    focusedIndicatorColor = Color.Transparent,
                    cursorColor = PrimaryGreen,
                    focusedTextColor = Color.White,
                    unfocusedTextColor = Color.White
                ),
                textStyle = LocalTextStyle.current.copy(
                    color = Color.White,
                    fontFamily = Urbanist,
                    fontWeight = FontWeight.Normal,
                    fontSize = 16.sp
                )
            )
            Spacer(modifier = Modifier.height(16.dp))
            Text(
                text = "Password",
                color = Color.White,
                fontFamily = Urbanist,
                fontWeight = FontWeight.SemiBold,
                fontSize = 14.sp,
                modifier = Modifier.align(Alignment.Start)
            )
            Spacer(modifier = Modifier.height(8.dp))
            TextField(
                value = password,
                onValueChange = { password = it },
                singleLine = true,
                modifier = Modifier
                    .fillMaxWidth()
                    .background(Color(0xFF18181C), RoundedCornerShape(12.dp)),
                colors = TextFieldDefaults.colors(
                    unfocusedContainerColor = Color(0xFF18181C),
                    focusedContainerColor = Color(0xFF18181C),
                    unfocusedIndicatorColor = Color.Transparent,
                    focusedIndicatorColor = Color.Transparent,
                    cursorColor = PrimaryGreen,
                    focusedTextColor = Color.White,
                    unfocusedTextColor = Color.White
                ),
                textStyle = LocalTextStyle.current.copy(
                    color = Color.White,
                    fontFamily = Urbanist,
                    fontWeight = FontWeight.Normal,
                    fontSize = 16.sp
                ),
                visualTransformation = if (passwordVisible) VisualTransformation.None else PasswordVisualTransformation(),
                trailingIcon = {
                    IconButton(onClick = { passwordVisible = !passwordVisible }) {
                        Icon(
                            painter = painterResource(id = if (passwordVisible) R.drawable.ic_visibility_on else R.drawable.ic_visibility_off),
                            contentDescription = if (passwordVisible) "Hide password" else "Show password",
                            tint = Color.Black
                        )
                    }
                }
            )
            Spacer(modifier = Modifier.height(8.dp))
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.End
            ) {
                Text(
                    text = "Forgot Password",
                    color = PrimaryGreen,
                    fontFamily = Urbanist,
                    fontWeight = FontWeight.Medium,
                    fontSize = 14.sp,
                    modifier = Modifier.clickable { }
                )
            }
            Spacer(modifier = Modifier.height(24.dp))
            Button(
                onClick = onLogin,
                modifier = Modifier
                    .fillMaxWidth()
                    .height(48.dp),
                colors = ButtonDefaults.buttonColors(containerColor = PrimaryGreen),
                shape = RoundedCornerShape(8.dp)
            ) {
                Text(
                    text = "Login",
                    color = Color.White,
                    fontFamily = Urbanist,
                    fontWeight = FontWeight.Bold,
                    fontSize = 18.sp
                )
            }
            Spacer(modifier = Modifier.height(16.dp))
            Text(
                text = "Or Continue with",
                color = Color.White,
                fontFamily = Urbanist,
                fontWeight = FontWeight.Normal,
                fontSize = 14.sp
            )
            Spacer(modifier = Modifier.height(16.dp))
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                Button(
                    onClick = { },
                    modifier = Modifier
                        .weight(1f)
                        .height(48.dp),
                    colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF18181C)),
                    shape = RoundedCornerShape(8.dp)
                ) {
                    Icon(
                        painter = painterResource(id = R.drawable.ic_google),
                        contentDescription = "Google",
                        modifier = Modifier.size(24.dp)
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(
                        text = "Google",
                        color = Color.White,
                        fontFamily = Urbanist,
                        fontWeight = FontWeight.Bold,
                        fontSize = 16.sp
                    )
                }
                Spacer(modifier = Modifier.width(16.dp))
                Button(
                    onClick = { },
                    modifier = Modifier
                        .weight(1f)
                        .height(48.dp),
                    colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF18181C)),
                    shape = RoundedCornerShape(8.dp)
                ) {
                    Icon(
                        painter = painterResource(id = R.drawable.ic_apple),
                        contentDescription = "Apple",
                        modifier = Modifier.size(24.dp)
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(
                        text = "Apple",
                        color = Color.White,
                        fontFamily = Urbanist,
                        fontWeight = FontWeight.Bold,
                        fontSize = 16.sp
                    )
                }
            }
            Spacer(modifier = Modifier.height(16.dp))
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.Center
            ) {
                Text(
                    text = "Don't have an account? ",
                    color = Color.White,
                    fontFamily = Urbanist,
                    fontWeight = FontWeight.Normal,
                    fontSize = 14.sp
                )
                Text(
                    text = "Register",
                    color = PrimaryGreen,
                    fontFamily = Urbanist,
                    fontWeight = FontWeight.Bold,
                    fontSize = 14.sp,
                    modifier = Modifier.clickable { }
                )
            }
        }
    }
}

5. HomeScreen.kt:
   - Main application interface
   - Cryptocurrency data display
   - User dashboard

```kotlin
package com.example.cryptoai

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.cryptoai.ui.theme.PrimaryGreen
import com.example.cryptoai.ui.theme.Urbanist
import com.example.cryptoai.R

@Composable
fun HomeScreen() {
    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFF131316))
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(horizontal = 24.dp)
        ) {
            Spacer(modifier = Modifier.height(32.dp))
            // Profile Row
            Row(
                verticalAlignment = Alignment.CenterVertically,
                modifier = Modifier.fillMaxWidth()
            ) {
                Image(
                    painter = painterResource(id = R.drawable.profile),
                    contentDescription = "Profile Picture",
                    modifier = Modifier
                        .size(48.dp)
                        .clip(CircleShape)
                        .background(Color.Gray)
                )
                Spacer(modifier = Modifier.width(12.dp))
                Column(
                    modifier = Modifier.weight(1f)
                ) {
                    Text(
                        text = "Mark Salt",
                        color = Color.White,
                        fontFamily = Urbanist,
                        fontWeight = FontWeight.Bold,
                        fontSize = 20.sp
                    )
                    Text(
                        text = "Online",
                        color = Color(0xFFB0B0B0),
                        fontFamily = Urbanist,
                        fontWeight = FontWeight.Normal,
                        fontSize = 14.sp
                    )
                }
                Icon(
                    painter = painterResource(id = R.drawable.ic_search),
                    contentDescription = "Search",
                    tint = Color.White,
                    modifier = Modifier.size(24.dp)
                )
                Spacer(modifier = Modifier.width(16.dp))
                Icon(
                    painter = painterResource(id = R.drawable.ic_notification),
                    contentDescription = "Notification",
                    tint = Color.White,
                    modifier = Modifier.size(24.dp)
                )
            }
            Spacer(modifier = Modifier.height(32.dp))
            // Portfolio Card
            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .background(PrimaryGreen, RoundedCornerShape(16.dp))
                    .padding(24.dp)
            ) {
                Column {
                    Text(
                        text = "My Portfolio",
                        color = Color.White,
                        fontFamily = Urbanist,
                        fontWeight = FontWeight.Normal,
                        fontSize = 16.sp
                    )
                    Spacer(modifier = Modifier.height(8.dp))
                    Row(
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Text(
                            text = "$34,010.00",
                            color = Color.White,
                            fontFamily = Urbanist,
                            fontWeight = FontWeight.Bold,
                            fontSize = 32.sp
                        )
                        Spacer(modifier = Modifier.width(16.dp))
                        Row(
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Icon(
                                painter = painterResource(id = R.drawable.ic_arrow_right),
                                contentDescription = null,
                                tint = Color.White,
                                modifier = Modifier.size(16.dp)
                            )
                            Spacer(modifier = Modifier.width(4.dp))
                            Text(
                                text = "+2.5%",
                                color = Color.White,
                                fontFamily = Urbanist,
                                fontWeight = FontWeight.SemiBold,
                                fontSize = 16.sp
                            )
                        }
                    }
                }
            }
            Spacer(modifier = Modifier.height(32.dp))
            // Action Buttons
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                ActionButton(icon = R.drawable.ic_send, label = "Send")
                ActionButton(icon = R.drawable.ic_receive, label = "Receive")
                ActionButton(icon = R.drawable.ic_exchange, label = "Exchange")
                ActionButton(icon = R.drawable.ic_more, label = "More")
            }
        }
    }
}

@Composable
fun ActionButton(icon: Int, label: String) {
    Column(
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Box(
            modifier = Modifier
                .size(56.dp)
                .clip(CircleShape)
                .background(Color(0xFF18181C))
                .clickable { }
                .padding(16.dp),
            contentAlignment = Alignment.Center
        ) {
            Icon(
                painter = painterResource(id = icon),
                contentDescription = label,
                tint = Color.White,
                modifier = Modifier.size(28.dp)
            )
        }
        Spacer(modifier = Modifier.height(8.dp))
        Text(
            text = label,
            color = Color.White,
            fontFamily = Urbanist,
            fontWeight = FontWeight.Normal,
            fontSize = 14.sp
        )
    }
}

6. ChatScreen.kt:
   - AI chat interface
   - Message display
   - User input handling

7. ChatViewModel.kt:
   - Chat state management
   - Message processing
   - AI integration

8. UiState.kt:
   - UI state definitions
   - State management
   - Error states

Development Guidelines
--------------------
1. Code Style:
   - Follow Kotlin coding conventions
   - Use meaningful variable names
   - Implement proper documentation

2. Architecture:
   - Follow MVVM pattern
   - Separate concerns
   - Use dependency injection

3. UI/UX:
   - Follow Material Design guidelines
   - Implement responsive layouts
   - Ensure accessibility

4. Testing:
   - Unit tests for ViewModels
   - UI tests for composables
   - Integration tests

Security Considerations
---------------------
1. Authentication:
   - Secure login process
   - Token management
   - Session handling

2. Data Protection:
   - Secure storage
   - Encryption
   - Privacy considerations

3. API Security:
   - Secure API calls
   - API key management
   - Rate limiting

Future Enhancements
------------------
1. Planned Features:
   - Enhanced AI capabilities
   - More cryptocurrency integrations
   - Advanced analytics

2. Performance Improvements:
   - Caching mechanisms
   - Optimized loading
   - Better state management

3. UI/UX Improvements:
   - More animations
   - Better error handling
   - Enhanced user feedback

Note: This documentation is based on the current codebase structure and may be updated as the application evolves. 